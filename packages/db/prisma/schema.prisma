generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id       String   @id @default(uuid())
  email    String   @unique
  password String
  type     UserType
  googleId String?
  student  Student?
  teacher  Teacher?
}

model Teacher {
  id                String          @id @default(uuid())
  userId            String          @unique
  company_name      String?
  highest_education String?
  years_of_exp      String?
  about             String?
  license           String?
  expertise         String[]
  subject           String?
  profile_pic       String?
  banner_pic        String?
  name              String?
  phone_number      String?
  price             Int?
  razorpay_cust_id  String?
  average_rating    Int?
  Availability      Availability[]
  Bookings          Booking[]
  Schedule          Schedule?
  user              User            @relation(fields: [userId], references: [id])
  teacher_review    TeacherReview[]
  Transactions      Transactions[]
  Wallet            Wallet?
}

model Student {
  id             String          @id @default(uuid())
  userId         String          @unique
  interests      String[]
  profile_pic    String?
  banner_pic     String?
  phoneNumber    String?
  name           String?
  Bookings       Booking[]
  user           User            @relation(fields: [userId], references: [id])
  teacher_review TeacherReview[]
  Transactions   Transactions[]
}

model TeacherReview {
  id        String  @id @default(uuid())
  teacherId String
  studentId String
  comment   String?
  rating    Int
  bookingId String  @unique
  booking   Booking @relation(fields: [bookingId], references: [id])
  student   Student @relation(fields: [studentId], references: [id])
  teacher   Teacher @relation(fields: [teacherId], references: [id])
}

model Schedule {
  id           String         @id @default(uuid())
  teacherId    String         @unique
  timezone     String
  duration     Int
  days         String[]
  availability Availability[]
  teacher      Teacher        @relation(fields: [teacherId], references: [id])
}

model Availability {
  id           String          @id @default(uuid())
  teacherId    String
  date         DateTime?
  scheduleId   String?
  startTime    DateTime
  endTime      DateTime
  availability Boolean         @default(true)
  status       OverrideStatus? @default(AVAILABLE)
  Schedule     Schedule?       @relation(fields: [scheduleId], references: [id], onDelete: Cascade)
  teacher      Teacher         @relation(fields: [teacherId], references: [id])
}

model Booking {
  id                 String          @id @default(uuid())
  teacherId          String
  studentId          String
  startTime          DateTime?
  meeting_url        String?
  payment_id         String?
  order_id           String?
  status             BookingStatus
  cancellationBy     CancellationBy?
  cancellationReason String?
  cancelledAt        DateTime?
  endTime            DateTime?
  amount             Decimal?
  student            Student         @relation(fields: [studentId], references: [id])
  teacher            Teacher         @relation(fields: [teacherId], references: [id])
  reviews            TeacherReview?
  transactions       Transactions[]
}

model Wallet {
  id           String         @id @default(uuid())
  teacherId    String         @unique
  currency     Currency
  amount       Decimal        @default(0.00)
  transactions Transactions[]
  teacher      Teacher        @relation(fields: [teacherId], references: [id])
}

model Transactions {
  id         String          @id @default(uuid())
  studentId  String?
  teacherId  String
  type       TransactionType
  walletId   String
  amount     Decimal
  createdAt  DateTime        @default(now())
  bookingId  String?
  updatedAt  DateTime        @updatedAt
  releasedAt DateTime?
  booking    Booking?        @relation(fields: [bookingId], references: [id])
  student    Student?        @relation(fields: [studentId], references: [id])
  teacher    Teacher         @relation(fields: [teacherId], references: [id])
  wallet     Wallet          @relation(fields: [walletId], references: [id])
}

enum UserType {
  TEACHER
  STUDENT
}

enum OverrideStatus {
  BOOKED
  UNAVAILABLE
  CANCELLED
  AVAILABLE
}

enum BookingStatus {
  PENDING_SUCCESS
  SCHEDULED
  COMPLETED
  FAILED
  CANCELLED
}

enum CancellationBy {
  TEACHER
  STUDENT
}

enum Currency {
  USD
  INR
}

enum TransactionType {
  BOOKING
  REFUND
  PAYOUT
  WITHDRAWAL
  COMPLETED
}
